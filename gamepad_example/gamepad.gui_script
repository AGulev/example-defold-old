local gamepad = require "gamepad_example.gamepad"

local SIZE = 220

function init(self)
    msg.post(".", "acquire_input_focus")
    self.gamepads = {}
    self.y = 0
end

function on_input(self, action_id, action)
    if (action_id == hash("GAMEPAD_CONNECTED")) then
        local gamepad_id = action.gamepad
        print("GAMEPAD_CONNECTED", action.gamepad)
        -- create new template instance
        local templated_tree = gui.clone_tree(gui.get_node("gamepad_template/root"))
        
        local new_gamepad = gamepad.new(templated_tree, gamepad_id, action.gamepad_name)
        self.gamepads[gamepad_id] = new_gamepad
        self.y = -(gamepad_id - 1) * SIZE
        print(self.y )
        gui.set_position(templated_tree["gamepad_template/root"], vmath.vector3(0, self.y, 0))
    elseif (action_id == hash("GAMEPAD_DISCONNECTED")) then
        print("GAMEPAD_DISCONNECTED", action.gamepad)
        local gamepad_id = action.gamepad
        local gamepad = self.gamepads[gamepad_id]
        self.gamepads[gamepad_id] = nil
        for k, v in pairs(gamepad.gui_tree) do
            gui.delete_node(v)
        end
    end
    
    for k,v in pairs(self.gamepads) do
        v:on_input(action_id, action)
    end
end
