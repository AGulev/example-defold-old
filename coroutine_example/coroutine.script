go.property("wait", 0)

local function sequence_1(self)
	msg.post("go_1", "enable")
	coroutine.yield(1)
	msg.post("go_2", "enable")
	coroutine.yield(1.5)
	msg.post("go_3", "enable")
	coroutine.yield(0.5)
	msg.post("go_1", "disable")
	coroutine.yield(1.2)
	msg.post("go_2", "disable")
	coroutine.yield(1.5)
	msg.post("go_3", "disable")
	return 0
end

function init(self)
	msg.post("go_1", "disable")
	msg.post("go_2", "disable")
	msg.post("go_3", "disable")
	msg.post(".", "run_sequence_1")
end

function run_sequence(seq)
	local status, wait_seconds = coroutine.resume(seq, self)
	if status then
		go.animate("#", "wait", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, wait_seconds, 0, function ()
			run_sequence(seq)
		end)
	else
		-- Run again
		msg.post(".", "run_sequence_1")
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("run_sequence_1") then
		local coroutine = coroutine.create(sequence_1)
		run_sequence(coroutine)	
	end
end
