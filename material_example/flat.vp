// view_proj and world are set as vertex constants and we
// access them in our vertex shader program by declaring them
// as "uniform".
// 
uniform mediump mat4 view_proj;
uniform mediump mat4 world;

// position holds the original vertex position.
attribute mediump vec4 position;

// texcoord0 contains the texture coordinate for this vertex.
attribute mediump vec2 texcoord0;

// Define a varying that will interpolate the texture coordinates
// between the vertices. The fragment shader will read this value.
varying mediump vec2 var_texcoord0;

void main()
{
    // Multiply view, projection and world matrices into one.
    mediump mat4 mvp = view_proj * world;

    // The varying var_texcoord0 is at texcoord0 at the position of
    // this vertex.
	var_texcoord0 = texcoord0;

    // Translate the vertex position with the mvp matrix.
    // The vec4(position.xyz, 1.0) ensures that the w component of
    // the position is always 1.0.
    gl_Position = mvp * vec4(position.xyz, 1.0);
}
