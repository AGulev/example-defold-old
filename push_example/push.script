function table.val_to_str ( v )
  if "string" == type( v ) then
    v = string.gsub( v, "\n", "\\n" )
    if string.match( string.gsub(v,"[^'\"]",""), '^"+$' ) then
      return "'" .. v .. "'"
    end
    return '"' .. string.gsub(v,'"', '\\"' ) .. '"'
  else
    return "table" == type( v ) and table.tostring( v ) or
      tostring( v )
  end
end

function table.key_to_str ( k )
  if "string" == type( k ) and string.match( k, "^[_%a][_%a%d]*$" ) then
    return k
  else
    return "[" .. table.val_to_str( k ) .. "]"
  end
end

function table.tostring( tbl )
  local result, done = {}, {}
  for k, v in ipairs( tbl ) do
    table.insert( result, table.val_to_str( v ) )
    done[ k ] = true
  end
  for k, v in pairs( tbl ) do
    if not done[ k ] then
      table.insert( result,
        table.key_to_str( k ) .. " = " .. table.val_to_str( v ) )
    end
  end
  return "{ " .. table.concat( result, ", " ) .. " }"
end

local function listener(self, payload, origin)
	-- The payload arrives here.
	pprint(payload)
	msg.post("/gui#gui", "set_message", { text = "Push payload received:" })
	msg.post("/gui#gui", "set_payload", { payload = table.tostring(payload) })
end

function init(self)
	local sysinfo = sys.get_sys_info()
	if sysinfo.system_name == "Android" then
		msg.post("#", "push_android")
	elseif sysinfo.system_name == "iPhone OS" then
		msg.post("#", "push_ios")	
	else
		msg.post("/gui#gui", "set_message", { text = "Notifications work only on iOS or Android"})
	end
end

function on_message(self, message_id, message)
	if message_id == hash("push_ios") then
		local alerts = {push.NOTIFICATION_BADGE, push.NOTIFICATION_SOUND, push.NOTIFICATION_ALERT}
		push.register(alerts, function (self, token, error)
			if token then
				local s = ""
				for i = 1,#token do
					s = s .. string.format("%02x", string.byte(token, i)) 
				end
				print(s)
			else
				msg.post("gui#script", "set_message", { text = "Push error:" .. error.error })
			end
		end)	
		push.set_listener(listener)
		msg.post("/gui#gui", "set_message", { text = "Waiting for push message"})
	elseif message_id == hash("push_android") then
		push.register(nil, function (self, token, error)
			if token then
				print("Here is the device token:" .. token)
			else
				msg.post("/gui#gui", "set_message", { text = "Push error: " .. error.error })
			end
		end)
		push.set_listener(listener)
		msg.post("/gui#gui", "set_message", { text = "Waiting for push message"})
	elseif message_id == hash("push_local") then
		-- Schedule a local push in 5 seconds
		local payload = '{"data":{"field":"Some value","field2":"Other value"}}'
		id, err = push.schedule(5, "A notification!", "Hello there", payload, { action = "get going" })
	end
end

function on_reload(self)
--		pprint(push.get_all_scheduled())
end