function init(self)
	self.mixer_groups = {}
	for i, name in ipairs(sound.get_group_names()) do
		self.mixer_groups[name] = factory.create("#group_factory", nil, nil)
	end

	msg.post(".", "init_mixer_groups")
	
	-- Play some music
	msg.post("#sound", "play_sound", { gain = 1.0 })
	msg.post("#tone", "play_sound", { gain = 1.0 })
	msg.post("#radio", "play_sound", { gain = 1.0 })
end

function on_message(self, message_id, message, sender)
	if message_id == hash("init_mixer_groups") then
		-- Set the name for all spawned mixer groups
		for i, name in ipairs(sound.get_group_names()) do
			msg.post(self.mixer_groups[name], "set_name", { name = name })
		end
	elseif message_id == hash("set_group_gain") then
		local url = msg.url()
		url.path = self.mixer_groups[message.group]
		url.fragment = hash("script")
		go.set(url, "gain", message.gain)
	elseif message_id == hash("mute") then
		local url = msg.url()
		url.path = self.mixer_groups[message.group]
		url.fragment = hash("script")
		msg.post(url, "mute")
	elseif message_id == hash("unmute") then
		local url = msg.url()
		url.path = self.mixer_groups[message.group]
		url.fragment = hash("script")
		msg.post(url, "unmute")
	elseif message_id == hash("start_animation") then
		local url = msg.url()
		url.path = self.mixer_groups["music"]
		url.fragment = hash("script")
		go.set(url, "gain", 1)
		go.animate(url, "gain", go.PLAYBACK_LOOP_PINGPONG, 0, go.EASING_INOUTSINE, 5)	
		url.path = self.mixer_groups["tone"]
		go.set(url, "gain", 1)
		go.animate(url, "gain", go.PLAYBACK_LOOP_PINGPONG, 0, go.EASING_INOUTSINE, 4, 1)		
		url.path = self.mixer_groups["radio"]
		go.set(url, "gain", 1)
		go.animate(url, "gain", go.PLAYBACK_LOOP_PINGPONG, 0, go.EASING_INOUTSINE, 3, 2)
	elseif message_id == hash("stop_animation") then
		local url = msg.url()
		url.path = self.mixer_groups["music"]
		url.fragment = hash("script")
		go.cancel_animations(url, "gain")
		url.path = self.mixer_groups["tone"]
		go.cancel_animations(url, "gain")		
		url.path = self.mixer_groups["radio"]
		go.cancel_animations(url, "gain")		
	end
end

function on_reload(self)
end